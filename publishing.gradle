apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

project.afterEvaluate {
    if (project.plugins.hasPlugin("com.android.library")) {
        project.android.libraryVariants.all { variant ->
            variant.getOutputs().all { output ->
                outputFileName = new File("${project.name}-v${project.version}.aar")
            }
        }
    }
}

project.group = project.ext.group
project.version = project.ext.version

bintray {
    user = BINTRAY_USERNAME
    key = BINTRAY_API_KEY
    pkg {
        repo = 'shimmer'
        name = getArtifactId()
        licenses = ['BSD 2-Clause']
        vcsUrl = project.ext.scm
        version {
            name = project.version
            desc = project.ext.description
            released = new Date()
            vcsTag = project.version
        }
        publications = ['Bintray']
    }
}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "BSD 2-Clause"
            url "http://www.opensource.org/licenses/bsd-license.php"
            distribution "repo"
        }
    }
    scm {
        url ext.scm
    }
}

//create a jar from source files
task sourceJar(type: Jar) {
    if (project.plugins.hasPlugin("com.android.library")) {
        from android.sourceSets.main.java.srcDirs
        classifier "sources"
    }
}

publishing.publications {
    Bintray(MavenPublication) {
        groupId project.ext.group
        artifactId getArtifactId()
        version project.ext.version

        artifact sourceJar
        artifact "$buildDir/outputs/aar/${project.name}-v${project.version}.aar"

        //generate pom nodes for dependencies
        //when a project references another project, it's artifact node is generated
        pom.withXml {
            def root = asNode()
            root.appendNode('description', project.ext.description)
            root.appendNode('name', project.ext.name)
            root.appendNode('url', project.ext.scm)
            root.children().last() + pomConfig

            def dependenciesNode = root.appendNode('dependencies')

            configurations.compile.allDependencies.each { dependency ->
                if (dependency.group != null && dependency.name != null) {

                    if (dependency instanceof ProjectDependency) {
                        dependency.getDependencyProject().getArtifacts().each { artifact ->
                            addDependencyNodeToPom(dependenciesNode, dependency.group, getArtifactId(dependency.dependencyProject), dependency.version)
                        }
                    } else {
                        addDependencyNodeToPom(dependenciesNode, dependency.group, dependency.name, dependency.version)
                    }
                }
            }
        }
    }
}

def getArtifactId() {
    return getArtifactId(project)

}

def getArtifactId(someProject) {
    if (!someProject.ext.has('artifactId')) {
        //default artifactId is the project/module name
        return someProject.getName()

    }
    return someProject.ext.artifactId
}


def addDependencyNodeToPom(dependenciesNode, group, artifact, version) {
    def dependencyNode = dependenciesNode.appendNode('dependency')
    dependencyNode.appendNode("groupId", group)
    dependencyNode.appendNode("artifactId", artifact)
    dependencyNode.appendNode("version", version)
}